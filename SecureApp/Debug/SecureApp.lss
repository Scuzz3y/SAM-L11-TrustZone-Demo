
SecureApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000020  00007c00  00007c00  00027c00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     00000004  20000000  00000340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000001c  20000004  00000344  00020004  2**2
                  ALLOC
  4 .heap         00000200  20000020  00000360  00020004  2**0
                  ALLOC
  5 .stack        00000400  20000220  00000560  00020004  2**0
                  ALLOC
  6 .userRowBlock 0000001c  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  0003401c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00034048  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001379  00000000  00000000  000340a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000004ed  00000000  00000000  0003541a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012d  00000000  00000000  00035907  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000b0  00000000  00000000  00035a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00035ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000145bf  00000000  00000000  00035b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001ee3  00000000  00000000  0004a103  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007f5be  00000000  00000000  0004bfe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000104  00000000  00000000  000cb5a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	20 06 00 20 89 01 00 00 85 01 00 00 85 01 00 00      .. ............
	...
  2c:	85 01 00 00 00 00 00 00 00 00 00 00 85 01 00 00     ................
  3c:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  4c:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  5c:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  6c:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  7c:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  8c:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  9c:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  ac:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  bc:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  cc:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  dc:	85 01 00 00 85 01 00 00 85 01 00 00 85 01 00 00     ................
  ec:	85 01 00 00 85 01 00 00                             ........

000000f4 <__acle_se_secure_blink_led_10_s>:

#include "secure.h"    /* Header file with secure interface API */

/* Non-secure callable (entry) function */
void __attribute__((cmse_nonsecure_entry)) secure_blink_led_10_s(void)
{
  f4:	b510      	push	{r4, lr}
	blink_led_10_s();
  f6:	f240 2391 	movw	r3, #657	; 0x291
  fa:	f2c0 0300 	movt	r3, #0
  fe:	4798      	blx	r3
}
 100:	2000      	movs	r0, #0
 102:	0001      	movs	r1, r0
 104:	0002      	movs	r2, r0
 106:	0003      	movs	r3, r0
 108:	4684      	mov	ip, r0
 10a:	bc10      	pop	{r4}
 10c:	bc01      	pop	{r0}
 10e:	4686      	mov	lr, r0
 110:	f380 8800 	msr	CPSR_f, r0
 114:	4704      	bxns	r0
	...

00000118 <__do_global_dtors_aux>:
 118:	b510      	push	{r4, lr}
 11a:	f240 0404 	movw	r4, #4
 11e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 122:	7823      	ldrb	r3, [r4, #0]
 124:	b963      	cbnz	r3, 140 <__do_global_dtors_aux+0x28>
 126:	f240 0300 	movw	r3, #0
 12a:	f2c0 0300 	movt	r3, #0
 12e:	b12b      	cbz	r3, 13c <__do_global_dtors_aux+0x24>
 130:	f244 001c 	movw	r0, #16412	; 0x401c
 134:	f2c0 0080 	movt	r0, #128	; 0x80
 138:	e000      	b.n	13c <__do_global_dtors_aux+0x24>
 13a:	bf00      	nop
 13c:	2301      	movs	r3, #1
 13e:	7023      	strb	r3, [r4, #0]
 140:	bd10      	pop	{r4, pc}
 142:	46c0      	nop			; (mov r8, r8)

00000144 <frame_dummy>:
 144:	f240 0300 	movw	r3, #0
 148:	f2c0 0300 	movt	r3, #0
 14c:	b510      	push	{r4, lr}
 14e:	b14b      	cbz	r3, 164 <frame_dummy+0x20>
 150:	f240 0108 	movw	r1, #8
 154:	f244 001c 	movw	r0, #16412	; 0x401c
 158:	f2c2 0100 	movt	r1, #8192	; 0x2000
 15c:	f2c0 0080 	movt	r0, #128	; 0x80
 160:	e000      	b.n	164 <frame_dummy+0x20>
 162:	bf00      	nop
 164:	f244 001c 	movw	r0, #16412	; 0x401c
 168:	f2c0 0080 	movt	r0, #128	; 0x80
 16c:	6803      	ldr	r3, [r0, #0]
 16e:	b903      	cbnz	r3, 172 <frame_dummy+0x2e>
 170:	bd10      	pop	{r4, pc}
 172:	f240 0300 	movw	r3, #0
 176:	f2c0 0300 	movt	r3, #0
 17a:	2b00      	cmp	r3, #0
 17c:	d0f8      	beq.n	170 <frame_dummy+0x2c>
 17e:	4798      	blx	r3
 180:	e7f6      	b.n	170 <frame_dummy+0x2c>
 182:	46c0      	nop			; (mov r8, r8)

00000184 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 184:	e7fe      	b.n	184 <Dummy_Handler>
	...

00000188 <Reset_Handler>:
{
 188:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 18a:	f240 3240 	movw	r2, #832	; 0x340
 18e:	f2c0 0200 	movt	r2, #0
 192:	f240 0300 	movw	r3, #0
 196:	f2c2 0300 	movt	r3, #8192	; 0x2000
 19a:	429a      	cmp	r2, r3
 19c:	d020      	beq.n	1e0 <Reset_Handler+0x58>
                for (; pDest < &_erelocate;) {
 19e:	001a      	movs	r2, r3
 1a0:	f240 0304 	movw	r3, #4
 1a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 1a8:	429a      	cmp	r2, r3
 1aa:	d219      	bcs.n	1e0 <Reset_Handler+0x58>
 1ac:	f240 0304 	movw	r3, #4
 1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 1b4:	3303      	adds	r3, #3
 1b6:	4a24      	ldr	r2, [pc, #144]	; (248 <HEAP_SIZE+0x48>)
 1b8:	1a9b      	subs	r3, r3, r2
 1ba:	089b      	lsrs	r3, r3, #2
 1bc:	3301      	adds	r3, #1
 1be:	009b      	lsls	r3, r3, #2
 1c0:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 1c2:	f240 0100 	movw	r1, #0
 1c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 1ca:	1851      	adds	r1, r2, r1
 1cc:	f240 3040 	movw	r0, #832	; 0x340
 1d0:	f2c0 0000 	movt	r0, #0
 1d4:	1810      	adds	r0, r2, r0
 1d6:	6800      	ldr	r0, [r0, #0]
 1d8:	6008      	str	r0, [r1, #0]
 1da:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 1dc:	429a      	cmp	r2, r3
 1de:	d1f0      	bne.n	1c2 <Reset_Handler+0x3a>
        for (pDest = &_szero; pDest < &_ezero;) {
 1e0:	f240 0204 	movw	r2, #4
 1e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 1e8:	f240 0320 	movw	r3, #32
 1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 1f0:	429a      	cmp	r2, r3
 1f2:	d213      	bcs.n	21c <HEAP_SIZE+0x1c>
 1f4:	f240 0204 	movw	r2, #4
 1f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 1fc:	43d3      	mvns	r3, r2
 1fe:	f240 0120 	movw	r1, #32
 202:	f2c2 0100 	movt	r1, #8192	; 0x2000
 206:	468c      	mov	ip, r1
 208:	4463      	add	r3, ip
 20a:	2103      	movs	r1, #3
 20c:	438b      	bics	r3, r1
 20e:	3304      	adds	r3, #4
 210:	4694      	mov	ip, r2
 212:	4463      	add	r3, ip
                *pDest++ = 0;
 214:	2100      	movs	r1, #0
 216:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 218:	4293      	cmp	r3, r2
 21a:	d1fc      	bne.n	216 <HEAP_SIZE+0x16>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 21c:	f240 0300 	movw	r3, #0
 220:	f2c0 0300 	movt	r3, #0
 224:	227f      	movs	r2, #127	; 0x7f
 226:	4393      	bics	r3, r2
 228:	f64e 5200 	movw	r2, #60672	; 0xed00
 22c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 230:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 232:	f240 23d1 	movw	r3, #721	; 0x2d1
 236:	f2c0 0300 	movt	r3, #0
 23a:	4798      	blx	r3
        main();
 23c:	f240 2361 	movw	r3, #609	; 0x261
 240:	f2c0 0300 	movt	r3, #0
 244:	4798      	blx	r3
 246:	e7fe      	b.n	246 <HEAP_SIZE+0x46>
 248:	20000004 	.word	0x20000004

0000024c <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
    // Keep the default device state after reset
    SystemCoreClock = __SYSTEM_CLOCK;
 24c:	f240 0300 	movw	r3, #0
 250:	f2c2 0300 	movt	r3, #8192	; 0x2000
 254:	f640 1200 	movw	r2, #2304	; 0x900
 258:	f2c0 023d 	movt	r2, #61	; 0x3d
 25c:	601a      	str	r2, [r3, #0]
    return;
}
 25e:	4770      	bx	lr

00000260 <main>:
	* Jumps to the non-secure software application
*/

/* Secure main() */
int main(void)
{
 260:	b510      	push	{r4, lr}
	funcptr_void NonSecure_ResetHandler;
  	
	/* Initialize the SAM system */
    SystemInit();
 262:	f240 234d 	movw	r3, #589	; 0x24d
 266:	f2c0 0300 	movt	r3, #0
 26a:	4798      	blx	r3

	/* Set non-secure main stack (MSP_NS) */
	__TZ_set_MSP_NS(*((uint32_t *)(TZ_START_NS)));
 26c:	f248 0300 	movw	r3, #32768	; 0x8000
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 270:	681b      	ldr	r3, [r3, #0]
 272:	f383 8888 	msr	MSP_NS, r3
  
	/* Get non-secure reset handler */
	NonSecure_ResetHandler = (funcptr_void)(*((uint32_t *)((TZ_START_NS) + 4U)));
 276:	f248 0304 	movw	r3, #32772	; 0x8004
  
	/* Start non-secure state software application */
	NonSecure_ResetHandler();
 27a:	681c      	ldr	r4, [r3, #0]
 27c:	0864      	lsrs	r4, r4, #1
 27e:	0064      	lsls	r4, r4, #1
 280:	0020      	movs	r0, r4
 282:	0021      	movs	r1, r4
 284:	0022      	movs	r2, r4
 286:	0023      	movs	r3, r4
 288:	f000 f809 	bl	29e <__gnu_cmse_nonsecure_call>
  
    /* Replace with your SECURE application code */
    while (1) 
    {
		__NOP();
 28c:	46c0      	nop			; (mov r8, r8)
 28e:	e7fd      	b.n	28c <main+0x2c>

00000290 <blink_led_10_s>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
 290:	f240 2300 	movw	r3, #512	; 0x200
 294:	f2c6 0300 	movt	r3, #24576	; 0x6000
 298:	2280      	movs	r2, #128	; 0x80
 29a:	61da      	str	r2, [r3, #28]
#define LED0 GPIO(GPIO_PORTA, 7)

void blink_led_10_s(void)
{
	gpio_toggle_pin_level(LED0);
}
 29c:	4770      	bx	lr

0000029e <__gnu_cmse_nonsecure_call>:
 29e:	b5e0      	push	{r5, r6, r7, lr}
 2a0:	4645      	mov	r5, r8
 2a2:	464e      	mov	r6, r9
 2a4:	4657      	mov	r7, sl
 2a6:	b4e0      	push	{r5, r6, r7}
 2a8:	465d      	mov	r5, fp
 2aa:	b420      	push	{r5}
 2ac:	4625      	mov	r5, r4
 2ae:	4626      	mov	r6, r4
 2b0:	4627      	mov	r7, r4
 2b2:	46a0      	mov	r8, r4
 2b4:	46a1      	mov	r9, r4
 2b6:	46a2      	mov	sl, r4
 2b8:	46a3      	mov	fp, r4
 2ba:	46a4      	mov	ip, r4
 2bc:	f384 8800 	msr	CPSR_f, r4
 2c0:	47a4      	blxns	r4
 2c2:	bc20      	pop	{r5}
 2c4:	46ab      	mov	fp, r5
 2c6:	bce0      	pop	{r5, r6, r7}
 2c8:	46ba      	mov	sl, r7
 2ca:	46b1      	mov	r9, r6
 2cc:	46a8      	mov	r8, r5
 2ce:	bde0      	pop	{r5, r6, r7, pc}

000002d0 <__libc_init_array>:
 2d0:	b570      	push	{r4, r5, r6, lr}
 2d2:	2500      	movs	r5, #0
 2d4:	4b0e      	ldr	r3, [pc, #56]	; (310 <__libc_init_array+0x40>)
 2d6:	4c0f      	ldr	r4, [pc, #60]	; (314 <__libc_init_array+0x44>)
 2d8:	1ae4      	subs	r4, r4, r3
 2da:	10a4      	asrs	r4, r4, #2
 2dc:	42a5      	cmp	r5, r4
 2de:	d109      	bne.n	2f4 <__libc_init_array+0x24>
 2e0:	2500      	movs	r5, #0
 2e2:	f000 f81d 	bl	320 <_init>
 2e6:	4c0c      	ldr	r4, [pc, #48]	; (318 <__libc_init_array+0x48>)
 2e8:	4b0c      	ldr	r3, [pc, #48]	; (31c <__libc_init_array+0x4c>)
 2ea:	1ae4      	subs	r4, r4, r3
 2ec:	10a4      	asrs	r4, r4, #2
 2ee:	42a5      	cmp	r5, r4
 2f0:	d107      	bne.n	302 <__libc_init_array+0x32>
 2f2:	bd70      	pop	{r4, r5, r6, pc}
 2f4:	4a06      	ldr	r2, [pc, #24]	; (310 <__libc_init_array+0x40>)
 2f6:	00ab      	lsls	r3, r5, #2
 2f8:	189b      	adds	r3, r3, r2
 2fa:	681b      	ldr	r3, [r3, #0]
 2fc:	4798      	blx	r3
 2fe:	3501      	adds	r5, #1
 300:	e7ec      	b.n	2dc <__libc_init_array+0xc>
 302:	4a06      	ldr	r2, [pc, #24]	; (31c <__libc_init_array+0x4c>)
 304:	00ab      	lsls	r3, r5, #2
 306:	189b      	adds	r3, r3, r2
 308:	681b      	ldr	r3, [r3, #0]
 30a:	4798      	blx	r3
 30c:	3501      	adds	r5, #1
 30e:	e7ee      	b.n	2ee <__libc_init_array+0x1e>
 310:	0000032c 	.word	0x0000032c
 314:	0000032c 	.word	0x0000032c
 318:	00000330 	.word	0x00000330
 31c:	0000032c 	.word	0x0000032c

00000320 <_init>:
 320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 322:	46c0      	nop			; (mov r8, r8)
 324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 326:	bc08      	pop	{r3}
 328:	469e      	mov	lr, r3
 32a:	4770      	bx	lr

0000032c <__init_array_start>:
 32c:	00000145 	.word	0x00000145

00000330 <_fini>:
 330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 332:	46c0      	nop			; (mov r8, r8)
 334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 336:	bc08      	pop	{r3}
 338:	469e      	mov	lr, r3
 33a:	4770      	bx	lr

0000033c <__fini_array_start>:
 33c:	00000119 	.word	0x00000119

Disassembly of section .gnu.sgstubs:

00007c00 <secure_blink_led_10_s>:
    7c00:	e97f e97f 	sg
    7c04:	f7f8 ba76 	b.w	f4 <__acle_se_secure_blink_led_10_s>
	...
